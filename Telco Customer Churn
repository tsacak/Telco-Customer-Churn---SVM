{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":18858,"sourceType":"datasetVersion","datasetId":13996}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sacaak/telco-customer-churn-svm?scriptVersionId=216989770\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:15:15.954974Z","iopub.execute_input":"2025-01-10T16:15:15.955197Z","iopub.status.idle":"2025-01-10T16:15:17.139305Z","shell.execute_reply.started":"2025-01-10T16:15:15.955174Z","shell.execute_reply":"2025-01-10T16:15:17.138452Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:15:20.782206Z","iopub.execute_input":"2025-01-10T16:15:20.782679Z","iopub.status.idle":"2025-01-10T16:15:20.8374Z","shell.execute_reply.started":"2025-01-10T16:15:20.782637Z","shell.execute_reply":"2025-01-10T16:15:20.836423Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:15:21.462006Z","iopub.execute_input":"2025-01-10T16:15:21.462498Z","iopub.status.idle":"2025-01-10T16:15:21.477556Z","shell.execute_reply.started":"2025-01-10T16:15:21.462456Z","shell.execute_reply":"2025-01-10T16:15:21.476286Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.dropna(subset=['TotalCharges'], inplace=True)\ndf.drop(columns=['customerID'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:15:34.169903Z","iopub.execute_input":"2025-01-10T16:15:34.170218Z","iopub.status.idle":"2025-01-10T16:15:34.189154Z","shell.execute_reply.started":"2025-01-10T16:15:34.170192Z","shell.execute_reply":"2025-01-10T16:15:34.188114Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['MultipleLines'] = df['MultipleLines'].replace('No phone service', 'no_phone_service')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:15:41.942999Z","iopub.execute_input":"2025-01-10T16:15:41.943374Z","iopub.status.idle":"2025-01-10T16:15:41.949384Z","shell.execute_reply.started":"2025-01-10T16:15:41.943313Z","shell.execute_reply":"2025-01-10T16:15:41.948442Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"columns_to_update = ['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\nfor col in columns_to_update:\n    df[col] = df[col].replace('No internet service', 'no_internet_service')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:15:47.342105Z","iopub.execute_input":"2025-01-10T16:15:47.342476Z","iopub.status.idle":"2025-01-10T16:15:47.355238Z","shell.execute_reply.started":"2025-01-10T16:15:47.342446Z","shell.execute_reply":"2025-01-10T16:15:47.353804Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Contract'] = df['Contract'].replace('Month-to-month', 'month_to_month')\ndf['Contract'] = df['Contract'].replace('One year', 'one_year')\ndf['Contract'] = df['Contract'].replace('Two year', 'two_year')\n\ndf['PaymentMethod'] = df['PaymentMethod'].replace('Electronic check', 'electronic_check')\ndf['PaymentMethod'] = df['PaymentMethod'].replace('Mailed check', 'mailed_check')\ndf['PaymentMethod'] = df['PaymentMethod'].replace('Bank transfer (automatic)', 'bank_transfer_automatic')\ndf['PaymentMethod'] = df['PaymentMethod'].replace('Credit card (automatic)', 'credit_card_automatic')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:15:57.734404Z","iopub.execute_input":"2025-01-10T16:15:57.734743Z","iopub.status.idle":"2025-01-10T16:15:57.749072Z","shell.execute_reply.started":"2025-01-10T16:15:57.734719Z","shell.execute_reply":"2025-01-10T16:15:57.748012Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"binary_cols = [col for col in df.columns if df[col].dtype not in ['int64', 'float64'] and df[col].nunique() == 2]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:05.390392Z","iopub.execute_input":"2025-01-10T16:16:05.39076Z","iopub.status.idle":"2025-01-10T16:16:05.407765Z","shell.execute_reply.started":"2025-01-10T16:16:05.390729Z","shell.execute_reply":"2025-01-10T16:16:05.406781Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:10.336052Z","iopub.execute_input":"2025-01-10T16:16:10.3364Z","iopub.status.idle":"2025-01-10T16:16:10.408416Z","shell.execute_reply.started":"2025-01-10T16:16:10.336367Z","shell.execute_reply":"2025-01-10T16:16:10.407657Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])\n    return dataframe","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:15.790838Z","iopub.execute_input":"2025-01-10T16:16:15.791178Z","iopub.status.idle":"2025-01-10T16:16:15.795567Z","shell.execute_reply.started":"2025-01-10T16:16:15.791153Z","shell.execute_reply":"2025-01-10T16:16:15.794295Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for col in binary_cols:\n    label_encoder(df, col)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:21.533981Z","iopub.execute_input":"2025-01-10T16:16:21.534328Z","iopub.status.idle":"2025-01-10T16:16:21.547848Z","shell.execute_reply.started":"2025-01-10T16:16:21.534299Z","shell.execute_reply":"2025-01-10T16:16:21.546605Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def apply_one_hot_encoding(dataframe, columns_to_encode, drop_first=True):\n\n    for col in columns_to_encode:\n        dataframe = pd.get_dummies(dataframe, columns=[col], drop_first=drop_first, dtype=int)\n    return dataframe\n\n\n\n\ncolumns_to_encode = [\n    'MultipleLines',\n    'InternetService',\n    'OnlineSecurity',\n    'OnlineBackup',\n    'DeviceProtection',\n    'TechSupport',\n    'StreamingTV',\n    'StreamingMovies',\n    'Contract',\n    'PaymentMethod'\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:26.247951Z","iopub.execute_input":"2025-01-10T16:16:26.248267Z","iopub.status.idle":"2025-01-10T16:16:26.253375Z","shell.execute_reply.started":"2025-01-10T16:16:26.248242Z","shell.execute_reply":"2025-01-10T16:16:26.252385Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = apply_one_hot_encoding(df, columns_to_encode)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:31.505874Z","iopub.execute_input":"2025-01-10T16:16:31.506202Z","iopub.status.idle":"2025-01-10T16:16:31.561268Z","shell.execute_reply.started":"2025-01-10T16:16:31.506177Z","shell.execute_reply":"2025-01-10T16:16:31.560505Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:37.660267Z","iopub.execute_input":"2025-01-10T16:16:37.660612Z","iopub.status.idle":"2025-01-10T16:16:37.767073Z","shell.execute_reply.started":"2025-01-10T16:16:37.660587Z","shell.execute_reply":"2025-01-10T16:16:37.766054Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:16:43.742313Z","iopub.execute_input":"2025-01-10T16:16:43.742695Z","iopub.status.idle":"2025-01-10T16:16:43.751573Z","shell.execute_reply.started":"2025-01-10T16:16:43.742667Z","shell.execute_reply":"2025-01-10T16:16:43.750711Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.svm import SVC\nclassifier = SVC(kernel='rbf', random_state= 0, probability=True)\nclassifier.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:22:07.517852Z","iopub.execute_input":"2025-01-10T16:22:07.518181Z","iopub.status.idle":"2025-01-10T16:22:10.133321Z","shell.execute_reply.started":"2025-01-10T16:22:07.518155Z","shell.execute_reply":"2025-01-10T16:22:10.132448Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred = classifier.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:22:10.134426Z","iopub.execute_input":"2025-01-10T16:22:10.134729Z","iopub.status.idle":"2025-01-10T16:22:10.442111Z","shell.execute_reply.started":"2025-01-10T16:22:10.134696Z","shell.execute_reply":"2025-01-10T16:22:10.441033Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:22:10.443543Z","iopub.execute_input":"2025-01-10T16:22:10.443823Z","iopub.status.idle":"2025-01-10T16:22:10.454655Z","shell.execute_reply.started":"2025-01-10T16:22:10.443799Z","shell.execute_reply":"2025-01-10T16:22:10.45364Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 0.8685911245152951 -> linear\n# 0.8690219732873762 -> rbf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:22:14.343986Z","iopub.execute_input":"2025-01-10T16:22:14.344325Z","iopub.status.idle":"2025-01-10T16:22:14.34814Z","shell.execute_reply.started":"2025-01-10T16:22:14.344297Z","shell.execute_reply":"2025-01-10T16:22:14.347164Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score\n\ny_pred_prob = classifier.predict_proba(X_test)[:, 1]\nauc = roc_auc_score(y_test, y_pred_prob)\nprint(f\"AUC: {auc}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:22:14.95318Z","iopub.execute_input":"2025-01-10T16:22:14.953574Z","iopub.status.idle":"2025-01-10T16:22:15.218949Z","shell.execute_reply.started":"2025-01-10T16:22:14.95354Z","shell.execute_reply":"2025-01-10T16:22:15.217984Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import log_loss\n\nlogloss = log_loss(y_test, y_pred_prob)\nprint(f\"Log Loss: {logloss}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:23:57.986878Z","iopub.execute_input":"2025-01-10T16:23:57.987252Z","iopub.status.idle":"2025-01-10T16:23:57.995502Z","shell.execute_reply.started":"2025-01-10T16:23:57.987218Z","shell.execute_reply":"2025-01-10T16:23:57.994569Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import matthews_corrcoef\n\nmcc = matthews_corrcoef(y_test, y_pred)\nprint(f\"Matthews Correlation Coefficient (MCC): {mcc}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-10T16:24:28.932152Z","iopub.execute_input":"2025-01-10T16:24:28.932539Z","iopub.status.idle":"2025-01-10T16:24:28.941497Z","shell.execute_reply.started":"2025-01-10T16:24:28.932506Z","shell.execute_reply":"2025-01-10T16:24:28.940537Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}